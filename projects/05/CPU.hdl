// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // define if A-instruction, isA=1, isC=0;
    //        if C-instruction, isA=0, isC=1;
    // decode
    Not (in=instruction[15], out=isC);
    Not (in=isC, out=isA);
    // (in=instruction[12],)
    And (a=isC, b=instruction[11], out=c1);
    And (a=isC, b=instruction[10], out=c2);
    And (a=isC, b=instruction[9], out=c3);
    And (a=isC, b=instruction[8], out=c4);
    And (a=isC, b=instruction[7], out=c5);
    And (a=isC, b=instruction[6], out=c6);
    And (a=isC, b=instruction[5], out=d1);  # A
    And (a=isC, b=instruction[4], out=d2);  # D
    And (a=isC, b=instruction[3], out=d3);  # M
    And (a=isC, b=instruction[2], out=j1);
    And (a=isC, b=instruction[1], out=j2);
    And (a=isC, b=instruction[0], out=j3);
    
    Mux16 (a=instruction, b=ALUopt, sel=, out=toA);
    ARegister (in=toA, load=, out=outA, out=addressM[0..14]);
    Mux16 (a=outA, b=inM, sel=instruction[12], out=AorM);
    DRegister (in=ALUopt, load=d2, out=outD);
    ALU (x=, y=, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=ALUopt, out=outM);
    
    Mux16 (a=instruction, b=o1, sel=, out=o2);
    
    Mux16 (a=o3, b=inM, sel=, out=o4);
    PC (in=o3, load=, inc=, reset=reset, out=pc);
}

1 and 1 1
0 and 1
0 and 0
1 and 0